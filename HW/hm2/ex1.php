                        1. Какие типы паттернов проектирования существуют?

Перечислю типы и обозначение:
    а) Антипаттерны;
    б) Порождающие паттерны;
    в) Структурные паттерны;
    г) Поведенческие паттерны;
    д) Архитектурные паттерны;
    е) Паттерны работы с базами данных;


б) Порождающие шаблоны (Creational patterns) — шаблоны проектирования, абстрагирующие процесс создания классов
и объектов. Это делается для того, чтобы система стала независимой от способа создания и представления объектов.
Согласно классификации GoF, к порождающим шаблонам относятся:

    - Абстрактная фабрика (Abstract factory)
Особенности паттерна:
Обычно во время выполнения создается единственный экземпляр класса фабрики. Эта конкретная фабрика создает объекты-продукты, имеющие вполне определенную реализацию. Для создания других видов объектов клиент должен воспользоваться другой конкретной фабрикой.
Абстрактная фабрика должна инициализировать конкретную фабрику в проекте один раз. Желательно это делать на самом верхнем уровне, чтобы не получилось так, что в разных частях кода дублируются создания одного и того же набора классов.
Суть Абстрактной фабрики – в создании семейства наборов взаимозаменяемых классов.


    - Строитель (Builder).
Строитель отделяет конструирование сложного объекта от его представления, так что в результате одного и того же процесса конструирования могут получаться разные представления.
Паттерн Строитель дает гибкость при создании сложных объектов, когда заранее неизвестны возможные опции конструирования, которые могут быть расширены без переделки кода создателя.
Шаблон позволяет создавать разные свойства объекта, избегая загрязнения конструктора. Это полезно, когда у объекта может быть несколько свойств, или когда создание объекта состоит из большого количества этапов.


    - Фабричный метод (Factory method).
Особенности реализации:
Фабричный метод может как иметь реализацию в классе (рассмотрено в примере), так и быть абстрактным методом.
В первом случае это дает базовую реализацию и не требует обязательных наследников, во втором – позволяет не завязываться
на конкретную реализацию, а выбрать при инстанцировании конкретного наследника.
Возможно реализовать не простой Фабричный метод, а с аргументом, по которому происходит поиск нужного класса.
Например, аргумент метода используется в операторе switch, который ищет подходящий вариант и возвращает конкретный класс.
Суть Фабричного метода – он позволяет делегировать инстанцирование экземпляров класса подклассам.

    - Прототип (Prototype).
Цель Прототипа — клонирование объекта с теми же или похожими данными и состоянием.

    - Одиночка (Singleton).
Одиночка (Singleton) определяет операцию Instance, позволяющую клиентам получать доступ к единственному экземпляру и способную нести ответственность за создание собственного уникального экземпляра.


в) В структурных шаблонах рассматривается вопрос о том, как из классов и объектов образуются более крупные структуры.
    Они упрощают проектирование путём выявления простого способа реализовать отношения между субъектами.
    Согласно классификации GoF, выделяют следующие структурные шаблоны:
                        Адаптер (Adapter).
                        Мост (Bridge).
                        Компоновщик (Composite).
                        Декоратор (Decorator).
                        Фасад (Facade).
                        Приспособленец (Flyweight).
                        Заместитель (Proxy).
г) Поведенческими (Behavioral) называют шаблоны проектирования, определяющие алгоритмы и способы реализации
    взаимодействия различных объектов и классов. Этот тип паттернов помогает избавиться от ветвлений
    в коде (условных операторов if, switch).
    Полный список поведенческих шаблонов, согласно классификации GoF, включает:
                        Цепочку ответственности (Chain of responsibilily).
                        Команду (Command).
                        Интерпретатор (Interpreter).
                        Итератор (Iterator).
                        Посредник (Mediator).
                        Хранитель (Memento).
                        Наблюдатель (Observer).
                        Состояние (State).
                        Стратегия (Strategy).
                        Шаблонный метод (Template method).
                        Посетитель (Visitor).

д) Промышленные(Архитектурные) шаблоны — это часто применяемые в коммерческой разработке ПО паттерны, описанные
    американским специалистом по проектированию ПО Мартином Фаулером в его книге «Шаблоны корпоративных приложений»
    (старое название — «Архитектура корпоративных программных приложений»). Они описывают хорошо зарекомендовавшие
    себя архитектурные подходы к проектированию крупных частей приложений: например, слой предметной области или доступа к данным.
    Список описываемых в источнике шаблонов довольно обширен и для его рассмотрения понадобится несколько подробных курсов.
    Рассмотрим некоторые из них. В веб-программировании могут применяться:
                        Реестр (Registry).
                        Контроллер запросов (Front Controller).
                        Контроллер страниц (Page Controller).
                        Сценарий транзакции (Transaction Script).
                        Модель предметной области (Domain Model).
